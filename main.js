!function(){"use strict";var e=class{constructor(e,t){let{data:s,handleImageClick:r,handleLikeClick:n,handleDeleteCardClick:i}=e;this._name=s.name,this._link=s.link,this._id=s._id,this._isLiked=s.isLiked,this._cardSelector=t,this._handleImageClick=r,this._handleLikeClick=n,this._handleDeleteCardClick=i}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getId(){return this._id}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardDelete.addEventListener("click",(()=>{this._handleDeleteCardClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this)}))}_handleLikeButton(){this._isLiked?this._likeButton.classList.add("card__button_active"):this._likeButton.classList.remove("card__button_active")}handleLike(e){this._isLiked=e,this._handleLikeButton()}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardButton=this._cardElement.querySelector(".card__button"),this._cardDelete=this._cardElement.querySelector(".card__delete_button"),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this._handleLikeButton(),this._setEventListeners(),this._cardElement}},t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}disabledButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}enabledButton(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?this.disabledButton():this.enabledButton()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this.toggleButtonState()}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target===this._popupElement&&this.close()}))}}class r extends s{constructor(e,t){let{popupSelector:s}=e;super({popupSelector:s}),this._handleFormSubmit=t,this._form=this._popupElement.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input"),this._saveButton=this._form.querySelector(".modal__button"),this._saveButtonText=this._saveButton.textContent}setSubmitHandler(e){this._handleFormSubmit=e}_getInputValues(){return this._inputData={},this._inputList.forEach((e=>{this._inputData[e.name]=e.value})),this._inputData}saveModal(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._saveButton.textContent=e?t:this._saveButtonText}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)})),super.setEventListeners()}}const n={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"};document.querySelector(".gallery__cards");const i=document.querySelector("#profile-edit-modal"),o=(document.forms["profile-edit-form"],document.querySelector("#add-card-modal"),document.forms["add-card-form"]),a=(document.forms["change-avatar-form"],document.querySelector("#profile-edit-button")),l=document.querySelector(".profile__name-text"),c=document.querySelector(".profile__description"),d=document.querySelector("#profile-add-button"),h=document.querySelector("#avatar-change-button"),u=document.querySelector(".profile__avatar"),_=(i.querySelector("#owner-name"),i.querySelector("#owner-description"),{cardTemplate:"#card-template"}),m=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._previewImageElement=this._popupElement.querySelector(".modal__preview_image"),this._previewImageElementTitle=this._popupElement.querySelector(".modal__preview_title")}open(e){this._previewImageElement.src=e.link,this._previewImageElement.alt=e.name,this._previewImageElementTitle.textContent=e.name,super.open()}}({popupSelector:"#image-preview-modal"});m.setEventListeners();const p=new r({popupSelector:"#add-card-modal"},(function(e){const t={name:e.title,link:e.url};L((function(){return S.addCard(t).then((e=>{const t=C(e);k.addItem(t),console.log(t),p.close(),o.reset()}))}),p)}));p.setEventListeners();const E=new r({popupSelector:"#profile-edit-modal"},(function(e){const t=e.name,s=e.description;L((function(){return S.updateUserInfo({name:t,description:s}).then((()=>{g.setUserInfo({name:t,description:s}),E.close()}))}),E)}));E.setEventListeners();const v=new r({popupSelector:"#change-avatar-modal"},(function(e){L((function(){return S.changeAvatar(e.link).then((e=>{g.setUserAvatar(e.avatar),v.close()}))}),v)}));v.setEventListeners();const f=new r({popupSelector:"#confirm-delete-modal"},y);f.setEventListeners();const g=new class{constructor(e,t,s){this._descriptionElement=t,this._nameElement=e,this._avatarElement=s}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent}}getUserAvatar(){return{avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,description:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=s}setUserAvatar(e){this._avatarElement.src=e}}(l,c,u),S=new class{constructor(e){let{url:t,token:s}=e;this._url=t,this._token=s}checkResponse(e){return e.ok?(console.log("Response OK!"),e.json()):(console.log("Response NOT OK!"),Promise.reject(`Error: ${e.status}`))}_request(e,t){return fetch(e,t).then(this.checkResponse)}getInitialCards(){return this._request(`${this._url}/cards`,{headers:this._token})}getUserInfo(){return this._request(`${this._url}/users/me`,{headers:this._token})}getInfoAndCards(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}updateUserInfo(e){let{name:t,description:s}=e;return this._request(`${this._url}/users/me`,{method:"PATCH",headers:this._token,body:JSON.stringify({name:t,about:s})})}addCard(e){let{name:t,link:s}=e;return this._request(`${this._url}/cards`,{method:"POST",headers:this._token,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this._url}/cards/${e}`,{method:"DELETE",headers:this._token})}likeCardStatus(e,t){return this._request(`${this._url}/cards/${e}/likes`,{method:t?"PUT":"DELETE",headers:this._token})}changeAvatar(e){return this._request(`${this._url}/users/me/avatar`,{method:"PATCH",headers:this._token,body:JSON.stringify({avatar:e})})}}({url:"https://around-api.en.tripleten-services.com/v1",token:{authorization:"180fed17-f626-4f59-8309-4b759f5f0038","Content-Type":"application/json"}});S.getInfoAndCards().then((e=>{let[t,s]=e;g.setUserInfo({name:t.name,description:t.about}),g.setUserAvatar(t.avatar),k.renderItems(s)})).catch(console.error);const k=new class{constructor(e,t){let{renderer:s}=e;this._items=[],this._renderer=s,this._container=document.querySelector(t)}renderItems(e){this._items=e,this._items.reverse().forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({renderer:e=>{k.addItem(C(e))}},".gallery__cards");function C(t){const s=new e({data:t,handleImageClick:()=>{m.open(t)},handleLikeClick:e=>{S.likeCardStatus(e.getId(),!e._isLiked).then((t=>{e.handleLike(t.isLiked)})).catch(console.error)},handleDeleteCardClick:y},_.cardTemplate);return s.getView()}function L(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.saveModal(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.saveModal(!1)}))}function y(e){f.open(),f.setSubmitHandler((()=>{S.deleteCard(e._id).then((()=>{e.handleDeleteCard(),f.close()})).catch(console.error)}))}a.addEventListener("click",(()=>{const e=g.getUserInfo();E.setInputValues(e),E.open()})),d.addEventListener("click",(()=>{p.open(),I["add-form"].toggleButtonState()})),h.addEventListener("click",(()=>{v.open(),I["avatar-form"].toggleButtonState()}));const I={};[...document.querySelectorAll(".modal__form")].forEach((e=>{const s=new t(n,e),r=e.getAttribute("name");I[r]=s,s.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFFUCxJQUFJL0wsU0FBUzRDLGlCQUFpQixpQkFDdENFLFNBQVN2QixJQUNoQixNQUFNeUssRUFBWSxJQUFJQyxFQUFjM0ssRUFBVUMsR0FDeEMySyxFQUFXM0ssRUFBWTRLLGFBQWEsUUFFMUNKLEVBQWVHLEdBQVlGLEVBQzNCQSxFQUFVdkksa0JBQWtCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHsgZGF0YSwgaGFuZGxlSW1hZ2VDbGljaywgaGFuZGxlTGlrZUNsaWNrLCBoYW5kbGVEZWxldGVDYXJkQ2xpY2sgfSxcclxuICAgIGNhcmRTZWxlY3RvclxyXG4gICkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xyXG4gICAgdGhpcy5faXNMaWtlZCA9IGRhdGEuaXNMaWtlZDtcclxuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZENsaWNrID0gaGFuZGxlRGVsZXRlQ2FyZENsaWNrO1xyXG4gIH1cclxuXHJcbiAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRJZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pZDtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKHRoaXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fY2FyZERlbGV0ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDYXJkQ2xpY2sodGhpcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh0aGlzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUxpa2VCdXR0b24oKSB7XHJcbiAgICBpZiAodGhpcy5faXNMaWtlZCkge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZF9fYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUxpa2UoaXNMaWtlZCkge1xyXG4gICAgdGhpcy5faXNMaWtlZCA9IGlzTGlrZWQ7XHJcbiAgICB0aGlzLl9oYW5kbGVMaWtlQnV0dG9uKCk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVEZWxldGVDYXJkKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3KCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcmRCdXR0b24gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2J1dHRvblwiKTtcclxuICAgIHRoaXMuX2NhcmREZWxldGUgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZV9idXR0b25cIik7XHJcblxyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5hbHQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIHRoaXMuX2hhbmRsZUxpa2VCdXR0b24oKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FyZDtcclxuIiwiY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gc2V0dGluZ3MuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHNldHRpbmdzLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBzZXR0aW5ncy5lcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZm9ybSA9IGZvcm1FbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpIHtcclxuICAgIHRoaXMuX2Vycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IGlucHV0RWwudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpIHtcclxuICAgIHRoaXMuX2Vycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXHJcbiAgICApO1xyXG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcblxyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKTtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkaXNhYmxlZEJ1dHRvbigpIHtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlZEJ1dHRvbigpIHtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIF9oYXNJbnZhbGlkSW5wdXQoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuX2lucHV0TGlzdC5ldmVyeSgoaW5wdXRFbCkgPT4gaW5wdXRFbC52YWxpZGl0eS52YWxpZCk7XHJcbiAgfVxyXG5cclxuICB0b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xyXG4gICAgICB0aGlzLmRpc2FibGVkQnV0dG9uKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuZW5hYmxlZEJ1dHRvbigpO1xyXG4gIH1cclxuXHJcbiAgcmVzZXRWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICB9XHJcblxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCkge1xyXG4gICAgaWYgKCFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fY2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2xvc2VcIik7XHJcbiAgICB0aGlzLl9oYW5kbGVFc2NDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlKGV2dCkge1xyXG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldnQpID0+IHtcclxuICAgICAgaWYgKGV2dC50YXJnZXQgPT09IHRoaXMuX3BvcHVwRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpO1xyXG4gICAgdGhpcy5fc2F2ZUJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fc2F2ZUJ1dHRvblRleHQgPSB0aGlzLl9zYXZlQnV0dG9uLnRleHRDb250ZW50O1xyXG4gIH1cclxuXHJcbiAgc2V0U3VibWl0SGFuZGxlcihoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIHRoaXMuX2lucHV0RGF0YSA9IHt9O1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2lucHV0RGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5faW5wdXREYXRhO1xyXG4gIH1cclxuXHJcbiAgc2F2ZU1vZGFsKGlzU2F2aW5nLCBzYXZlVGV4dCA9IFwiU2F2aW5nLi4uXCIpIHtcclxuICAgIGlmIChpc1NhdmluZykge1xyXG4gICAgICB0aGlzLl9zYXZlQnV0dG9uLnRleHRDb250ZW50ID0gc2F2ZVRleHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9zYXZlQnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fc2F2ZUJ1dHRvblRleHQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRJbnB1dFZhbHVlcyhkYXRhKSB7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCBmb3JtVmFsdWVzID0gdGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKTtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdChmb3JtVmFsdWVzKTtcclxuICAgIH0pO1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuICB7XHJcbiAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xha2UtbG91aXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2JhbGQtbW91bnRhaW5zLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvdmFub2lzZS5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGFnbyBkaSBCcmFpZXNcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWdvLmpwZ1wiLFxyXG4gIH0sXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0dGluZ3MgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvclwiLFxyXG59O1xyXG4iLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcclxuaW1wb3J0IHsgaW5pdGlhbENhcmRzLCBzZXR0aW5ncyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcclxuXHJcbi8qIFdyYXBwZXJzKi9cclxuY29uc3QgY2FyZExpc3RFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZ2FsbGVyeV9fY2FyZHNcIik7XHJcbmNvbnN0IHByb2ZpbGVFZGl0TW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiKTtcclxuY29uc3QgcHJvZmlsZUVkaXRGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJwcm9maWxlLWVkaXQtZm9ybVwiXTtcclxuY29uc3QgYWRkQ2FyZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhZGQtY2FyZC1tb2RhbFwiKTtcclxuY29uc3QgYWRkQ2FyZEZvcm0gPSBkb2N1bWVudC5mb3Jtc1tcImFkZC1jYXJkLWZvcm1cIl07XHJcbmNvbnN0IGNoYW5nZUF2YXRhckZvcm0gPSBkb2N1bWVudC5mb3Jtc1tcImNoYW5nZS1hdmF0YXItZm9ybVwiXTtcclxuXHJcbi8qIEJ1dHRvbnMgJiBvdGhlciBET00gbm9kZXMgKi9cclxuY29uc3QgcHJvZmlsZUVkaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1idXR0b25cIik7XHJcbmNvbnN0IHByb2ZpbGVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19uYW1lLXRleHRcIik7XHJcbmNvbnN0IHByb2ZpbGVEZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIik7XHJcbmNvbnN0IGFkZE5ld0NhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYWRkLWJ1dHRvblwiKTtcclxuY29uc3QgYXZhdGFyQ2hhbmdlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdmF0YXItY2hhbmdlLWJ1dHRvblwiKTtcclxuY29uc3QgYXZhdGFySW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2F2YXRhclwiKTtcclxuXHJcbi8qIEZvcm0gZGF0YSAqL1xyXG5jb25zdCBwcm9maWxlTmFtZUlucHV0ID0gcHJvZmlsZUVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiI293bmVyLW5hbWVcIik7XHJcbmNvbnN0IHByb2ZpbGVEZXNjcmlwdGlvbklucHV0ID1cclxuICBwcm9maWxlRWRpdE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIjb3duZXItZGVzY3JpcHRpb25cIik7XHJcblxyXG5jb25zdCBjYXJkU2VsZWN0b3JzID0ge1xyXG4gIGNhcmRUZW1wbGF0ZTogXCIjY2FyZC10ZW1wbGF0ZVwiLFxyXG59O1xyXG5cclxuLyogRnVuY3Rpb25zICovXHJcblxyXG5jb25zdCBwb3B1cFdpdGhJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZSh7XHJcbiAgcG9wdXBTZWxlY3RvcjogXCIjaW1hZ2UtcHJldmlldy1tb2RhbFwiLFxyXG59KTtcclxucG9wdXBXaXRoSW1hZ2Uuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IG5ld0NhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIHtcclxuICAgIHBvcHVwU2VsZWN0b3I6IFwiI2FkZC1jYXJkLW1vZGFsXCIsXHJcbiAgfSxcclxuICBoYW5kbGVBZGRDYXJkU3VibWl0XHJcbik7XHJcbm5ld0NhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgZWRpdFByb2ZpbGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIHtcclxuICAgIHBvcHVwU2VsZWN0b3I6IFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxyXG4gIH0sXHJcbiAgaGFuZGxlUHJvZmlsZUVkaXRTdWJtaXRcclxuKTtcclxuZWRpdFByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgYXZhdGFyQ2hhbmdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICB7XHJcbiAgICBwb3B1cFNlbGVjdG9yOiBcIiNjaGFuZ2UtYXZhdGFyLW1vZGFsXCIsXHJcbiAgfSxcclxuICBoYW5kbGVDaGFuZ2VBdmF0YXJTdWJtaXRcclxuKTtcclxuYXZhdGFyQ2hhbmdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IGNvbmZpcm1EZWxldGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIHtcclxuICAgIHBvcHVwU2VsZWN0b3I6IFwiI2NvbmZpcm0tZGVsZXRlLW1vZGFsXCIsXHJcbiAgfSxcclxuICBoYW5kbGVEZWxldGVDYXJkU3VibWl0XHJcbik7XHJcbmNvbmZpcm1EZWxldGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8ocHJvZmlsZU5hbWUsIHByb2ZpbGVEZXNjcmlwdGlvbiwgYXZhdGFySW1hZ2UpO1xyXG5cclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgdXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXHJcbiAgdG9rZW46IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiMTgwZmVkMTctZjYyNi00ZjU5LTgzMDktNGI3NTlmNWYwMDM4XCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICB9LFxyXG59KTtcclxuXHJcbmFwaVxyXG4gIC5nZXRJbmZvQW5kQ2FyZHMoKVxyXG4gIC50aGVuKChbdXNlckRhdGEsIGNhcmRzXSkgPT4ge1xyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8oeyBuYW1lOiB1c2VyRGF0YS5uYW1lLCBkZXNjcmlwdGlvbjogdXNlckRhdGEuYWJvdXQgfSk7IC8vcmVuZGVyIHByb2ZpbGUgaW5mb1xyXG4gICAgdXNlckluZm8uc2V0VXNlckF2YXRhcih1c2VyRGF0YS5hdmF0YXIpOyAvL3JlbmRlciBwcm9maWxlIHBpY1xyXG4gICAgY2FyZFNlY3Rpb24ucmVuZGVySXRlbXMoY2FyZHMpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG5cclxuY29uc3QgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICB7XHJcbiAgICByZW5kZXJlcjogKGRhdGEpID0+IHtcclxuICAgICAgY2FyZFNlY3Rpb24uYWRkSXRlbShyZW5kZXJDYXJkKGRhdGEpKTtcclxuICAgIH0sXHJcbiAgfSxcclxuICBcIi5nYWxsZXJ5X19jYXJkc1wiXHJcbik7XHJcblxyXG4vKiBFdmVudCBIYW5kbGVycyAqL1xyXG5cclxuZnVuY3Rpb24gcmVuZGVyQ2FyZChkYXRhKSB7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxyXG4gICAge1xyXG4gICAgICBkYXRhLFxyXG4gICAgICBoYW5kbGVJbWFnZUNsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgcG9wdXBXaXRoSW1hZ2Uub3BlbihkYXRhKTtcclxuICAgICAgfSxcclxuICAgICAgaGFuZGxlTGlrZUNsaWNrOiAoY2FyZCkgPT4ge1xyXG4gICAgICAgIGFwaVxyXG4gICAgICAgICAgLmxpa2VDYXJkU3RhdHVzKGNhcmQuZ2V0SWQoKSwgIWNhcmQuX2lzTGlrZWQpXHJcbiAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBjYXJkLmhhbmRsZUxpa2UoZGF0YS5pc0xpa2VkKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgICAgIH0sXHJcbiAgICAgIGhhbmRsZURlbGV0ZUNhcmRDbGljazogaGFuZGxlRGVsZXRlQ2FyZFN1Ym1pdCxcclxuICAgIH0sXHJcbiAgICBjYXJkU2VsZWN0b3JzLmNhcmRUZW1wbGF0ZVxyXG4gICk7XHJcbiAgcmV0dXJuIGNhcmQuZ2V0VmlldygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVTdWJtaXQocmVxdWVzdCwgcG9wdXBJbnN0YW5jZSwgbG9hZGluZ1RleHQgPSBcIlNhdmluZy4uLlwiKSB7XHJcbiAgcG9wdXBJbnN0YW5jZS5zYXZlTW9kYWwodHJ1ZSwgbG9hZGluZ1RleHQpO1xyXG4gIHJlcXVlc3QoKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBwb3B1cEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgIHBvcHVwSW5zdGFuY2Uuc2F2ZU1vZGFsKGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlRWRpdFN1Ym1pdCh1c2VyRGF0YSkge1xyXG4gIGNvbnN0IG5hbWUgPSB1c2VyRGF0YS5uYW1lO1xyXG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gdXNlckRhdGEuZGVzY3JpcHRpb247XHJcblxyXG4gIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KCkge1xyXG4gICAgcmV0dXJuIGFwaVxyXG4gICAgICAudXBkYXRlVXNlckluZm8oeyBuYW1lOiBuYW1lLCBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24gfSlcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHsgbmFtZTogbmFtZSwgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uIH0pO1xyXG4gICAgICAgIGVkaXRQcm9maWxlUG9wdXAuY2xvc2UoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVTdWJtaXQobWFrZVJlcXVlc3QsIGVkaXRQcm9maWxlUG9wdXApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVBZGRDYXJkU3VibWl0KGlucHV0RGF0YSkge1xyXG4gIGNvbnN0IGNhcmREYXRhID0geyBuYW1lOiBpbnB1dERhdGEudGl0bGUsIGxpbms6IGlucHV0RGF0YS51cmwgfTtcclxuXHJcbiAgZnVuY3Rpb24gbWFrZVJlcXVlc3QoKSB7XHJcbiAgICByZXR1cm4gYXBpLmFkZENhcmQoY2FyZERhdGEpLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBjb25zdCBuZXdDYXJkID0gcmVuZGVyQ2FyZChyZXMpO1xyXG4gICAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKG5ld0NhcmQpO1xyXG4gICAgICBjb25zb2xlLmxvZyhuZXdDYXJkKTtcclxuICAgICAgbmV3Q2FyZFBvcHVwLmNsb3NlKCk7XHJcbiAgICAgIGFkZENhcmRGb3JtLnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVN1Ym1pdChtYWtlUmVxdWVzdCwgbmV3Q2FyZFBvcHVwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2hhbmdlQXZhdGFyU3VibWl0KGF2YXRhclVybCkge1xyXG4gIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KCkge1xyXG4gICAgcmV0dXJuIGFwaS5jaGFuZ2VBdmF0YXIoYXZhdGFyVXJsLmxpbmspLnRoZW4oKHVzZXJEYXRhKSA9PiB7XHJcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJBdmF0YXIodXNlckRhdGEuYXZhdGFyKTtcclxuICAgICAgYXZhdGFyQ2hhbmdlUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlU3VibWl0KG1ha2VSZXF1ZXN0LCBhdmF0YXJDaGFuZ2VQb3B1cCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUNhcmRTdWJtaXQoY2FyZERhdGEpIHtcclxuICBjb25maXJtRGVsZXRlUG9wdXAub3BlbigpO1xyXG5cclxuICBjb25maXJtRGVsZXRlUG9wdXAuc2V0U3VibWl0SGFuZGxlcigoKSA9PiB7XHJcbiAgICBhcGlcclxuICAgICAgLmRlbGV0ZUNhcmQoY2FyZERhdGEuX2lkKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgY2FyZERhdGEuaGFuZGxlRGVsZXRlQ2FyZCgpO1xyXG4gICAgICAgIGNvbmZpcm1EZWxldGVQb3B1cC5jbG9zZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUltYWdlQ2xpY2soY2FyZERhdGEpIHtcclxuICBwb3B1cFdpdGhJbWFnZS5vcGVuKGNhcmREYXRhKTtcclxufVxyXG5cclxuLy8gRm9ybSBMaXN0ZW5lcnNcclxucHJvZmlsZUVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBjb25zdCB1c2VyRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgZWRpdFByb2ZpbGVQb3B1cC5zZXRJbnB1dFZhbHVlcyh1c2VyRGF0YSk7XHJcbiAgZWRpdFByb2ZpbGVQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuYWRkTmV3Q2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIG5ld0NhcmRQb3B1cC5vcGVuKCk7XHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJhZGQtZm9ybVwiXS50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG59KTtcclxuXHJcbmF2YXRhckNoYW5nZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGF2YXRhckNoYW5nZVBvcHVwLm9wZW4oKTtcclxuICBmb3JtVmFsaWRhdG9yc1tcImF2YXRhci1mb3JtXCJdLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbn0pO1xyXG5cclxuLyogVmFsaWRhdGlvbiAqL1xyXG5jb25zdCBmb3JtVmFsaWRhdG9ycyA9IHt9O1xyXG5cclxuY29uc3QgZm9ybUxpc3QgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9fZm9ybVwiKV07XHJcbmZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XHJcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KTtcclxuICBjb25zdCBmb3JtTmFtZSA9IGZvcm1FbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XHJcblxyXG4gIGZvcm1WYWxpZGF0b3JzW2Zvcm1OYW1lXSA9IHZhbGlkYXRvcjtcclxuICB2YWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG59KTtcclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5fcHJldmlld0ltYWdlRWxlbWVudCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5tb2RhbF9fcHJldmlld19pbWFnZVwiXHJcbiAgICApO1xyXG4gICAgdGhpcy5fcHJldmlld0ltYWdlRWxlbWVudFRpdGxlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19wcmV2aWV3X3RpdGxlXCJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvcGVuKGRhdGEpIHtcclxuICAgIHRoaXMuX3ByZXZpZXdJbWFnZUVsZW1lbnQuc3JjID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5fcHJldmlld0ltYWdlRWxlbWVudC5hbHQgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9wcmV2aWV3SW1hZ2VFbGVtZW50VGl0bGUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3RvcihuYW1lU2VsZWN0b3IsIGRlc2NyaXB0aW9uU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9kZXNjcmlwdGlvbkVsZW1lbnQgPSBkZXNjcmlwdGlvblNlbGVjdG9yO1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBuYW1lU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9hdmF0YXJFbGVtZW50ID0gYXZhdGFyU2VsZWN0b3I7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJBdmF0YXIoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhdmF0YXI6IHRoaXMuX2F2YXRhckVsZW1lbnQuc3JjLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgZGVzY3JpcHRpb24gfSkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gZGVzY3JpcHRpb247XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyQXZhdGFyKGF2YXRhcikge1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoeyB1cmwsIHRva2VuIH0pIHtcclxuICAgIHRoaXMuX3VybCA9IHVybDtcclxuICAgIHRoaXMuX3Rva2VuID0gdG9rZW47XHJcbiAgfVxyXG5cclxuICBjaGVja1Jlc3BvbnNlKHJlcykge1xyXG4gICAgaWYgKCFyZXMub2spIHtcclxuICAgICAgY29uc29sZS5sb2coXCJSZXNwb25zZSBOT1QgT0shXCIpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlJlc3BvbnNlIE9LIVwiKTtcclxuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfcmVxdWVzdCh1cmwsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpLnRoZW4odGhpcy5jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX3Rva2VuLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBvdGhlciBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggdGhlIEFQSVxyXG5cclxuICAvL0dFVCB1c2Vycy9tZVxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fdXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5fdG9rZW4sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldEluZm9BbmRDYXJkcygpIHtcclxuICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5nZXRVc2VySW5mbygpLCB0aGlzLmdldEluaXRpYWxDYXJkcygpXSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVVc2VySW5mbyh7IG5hbWUsIGRlc2NyaXB0aW9uIH0pIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX3VybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl90b2tlbixcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBuYW1lOiBuYW1lLCBhYm91dDogZGVzY3JpcHRpb24gfSksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZENhcmQoeyBuYW1lLCBsaW5rIH0pIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX3Rva2VuLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBsaW5rOiBsaW5rLFxyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy9tZXRob2QgdG8gZGVsZXRlIGNhcmQgZnJvbSBzZXJ2ZXJcclxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fdXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5fdG9rZW4sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGxpa2VDYXJkU3RhdHVzKGNhcmRJZCwgbGlrZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fdXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogbGlrZSA/IFwiUFVUXCIgOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl90b2tlbixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2hhbmdlQXZhdGFyKGxpbmspIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX3VybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5fdG9rZW4sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYXZhdGFyOiBsaW5rIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgcmVuZGVyZXIgfSwgY2xhc3NTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBbXTtcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNsYXNzU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoaXRlbXMpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9pdGVtcy5yZXZlcnNlKCkuZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5fcmVuZGVyZXIoaXRlbSkpO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbImNvbnN0cnVjdG9yIiwiX3JlZiIsImNhcmRTZWxlY3RvciIsImRhdGEiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlTGlrZUNsaWNrIiwiaGFuZGxlRGVsZXRlQ2FyZENsaWNrIiwidGhpcyIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9pZCIsIl9pc0xpa2VkIiwiaXNMaWtlZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2FyZENsaWNrIiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsImdldElkIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX2xpa2VCdXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwiX2NhcmREZWxldGUiLCJfY2FyZEltYWdlIiwiX2hhbmRsZUxpa2VCdXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJoYW5kbGVMaWtlIiwiaGFuZGxlRGVsZXRlQ2FyZCIsIl9jYXJkRWxlbWVudCIsImdldFZpZXciLCJfY2FyZEJ1dHRvbiIsInRleHRDb250ZW50Iiwic3JjIiwiYWx0Iiwic2V0dGluZ3MiLCJmb3JtRWxlbWVudCIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbCIsIl9lcnJvck1lc3NhZ2VFbCIsImlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGlkZUlucHV0RXJyb3IiLCJfaW5wdXRMaXN0IiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIl9idXR0b25FbGVtZW50IiwiZm9yRWFjaCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ0b2dnbGVCdXR0b25TdGF0ZSIsImRpc2FibGVkQnV0dG9uIiwiZGlzYWJsZWQiLCJlbmFibGVkQnV0dG9uIiwiX2hhc0ludmFsaWRJbnB1dCIsImV2ZXJ5IiwidmFsaWRpdHkiLCJ2YWxpZCIsInJlc2V0VmFsaWRhdGlvbiIsImVuYWJsZVZhbGlkYXRpb24iLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJfY2xvc2VCdXR0b24iLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwib3BlbiIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImtleSIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX3NhdmVCdXR0b24iLCJfc2F2ZUJ1dHRvblRleHQiLCJzZXRTdWJtaXRIYW5kbGVyIiwiX2dldElucHV0VmFsdWVzIiwiX2lucHV0RGF0YSIsImlucHV0IiwidmFsdWUiLCJzYXZlTW9kYWwiLCJpc1NhdmluZyIsInNhdmVUZXh0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic2V0SW5wdXRWYWx1ZXMiLCJmb3JtVmFsdWVzIiwicHJvZmlsZUVkaXRNb2RhbCIsImFkZENhcmRGb3JtIiwiZm9ybXMiLCJwcm9maWxlRWRpdEJ0biIsInByb2ZpbGVOYW1lIiwicHJvZmlsZURlc2NyaXB0aW9uIiwiYWRkTmV3Q2FyZEJ1dHRvbiIsImF2YXRhckNoYW5nZUJ0biIsImF2YXRhckltYWdlIiwiY2FyZFNlbGVjdG9ycyIsImNhcmRUZW1wbGF0ZSIsInBvcHVwV2l0aEltYWdlIiwiX3ByZXZpZXdJbWFnZUVsZW1lbnQiLCJfcHJldmlld0ltYWdlRWxlbWVudFRpdGxlIiwibmV3Q2FyZFBvcHVwIiwiaW5wdXREYXRhIiwiY2FyZERhdGEiLCJ0aXRsZSIsInVybCIsImhhbmRsZVN1Ym1pdCIsImFwaSIsImFkZENhcmQiLCJ0aGVuIiwicmVzIiwibmV3Q2FyZCIsInJlbmRlckNhcmQiLCJjYXJkU2VjdGlvbiIsImFkZEl0ZW0iLCJjb25zb2xlIiwibG9nIiwicmVzZXQiLCJlZGl0UHJvZmlsZVBvcHVwIiwidXNlckRhdGEiLCJkZXNjcmlwdGlvbiIsInVwZGF0ZVVzZXJJbmZvIiwidXNlckluZm8iLCJzZXRVc2VySW5mbyIsImF2YXRhckNoYW5nZVBvcHVwIiwiYXZhdGFyVXJsIiwiY2hhbmdlQXZhdGFyIiwic2V0VXNlckF2YXRhciIsImF2YXRhciIsImNvbmZpcm1EZWxldGVQb3B1cCIsImhhbmRsZURlbGV0ZUNhcmRTdWJtaXQiLCJuYW1lU2VsZWN0b3IiLCJkZXNjcmlwdGlvblNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfZGVzY3JpcHRpb25FbGVtZW50IiwiX25hbWVFbGVtZW50IiwiX2F2YXRhckVsZW1lbnQiLCJnZXRVc2VySW5mbyIsImdldFVzZXJBdmF0YXIiLCJ0b2tlbiIsIl91cmwiLCJfdG9rZW4iLCJjaGVja1Jlc3BvbnNlIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsIl9yZXF1ZXN0Iiwib3B0aW9ucyIsImZldGNoIiwiZ2V0SW5pdGlhbENhcmRzIiwiaGVhZGVycyIsImdldEluZm9BbmRDYXJkcyIsImFsbCIsIl9yZWYyIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhYm91dCIsIl9yZWYzIiwiZGVsZXRlQ2FyZCIsImNhcmRJZCIsImxpa2VDYXJkU3RhdHVzIiwibGlrZSIsImF1dGhvcml6YXRpb24iLCJjYXJkcyIsInJlbmRlckl0ZW1zIiwiY2F0Y2giLCJlcnJvciIsImNsYXNzU2VsZWN0b3IiLCJyZW5kZXJlciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJpdGVtcyIsInJldmVyc2UiLCJpdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJjYXJkIiwiQ2FyZCIsInJlcXVlc3QiLCJwb3B1cEluc3RhbmNlIiwibG9hZGluZ1RleHQiLCJmaW5hbGx5IiwiZm9ybVZhbGlkYXRvcnMiLCJ2YWxpZGF0b3IiLCJGb3JtVmFsaWRhdG9yIiwiZm9ybU5hbWUiLCJnZXRBdHRyaWJ1dGUiXSwic291cmNlUm9vdCI6IiJ9